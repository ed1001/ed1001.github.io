{"ast":null,"code":"var _jsxFileName = \"/Users/Ed/code/ed1001/react-drums/src/components/Box.jsx\";\nimport React from \"react\";\nimport { GridContext } from \"../contexts/GridContext\";\nimport Tone from \"tone\";\nimport GridContainer from \"./GridContainer\";\nimport TransportContainer from \"./TransportContainer\";\nimport BPMContainer from \"./BPMContainer\";\nimport \"../App\";\nexport default class Box extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      this.sequence = new Tone.Sequence((time, index) => {\n        for (let instrument of Object.keys(this.context.instrumentLabels)) {\n          if (this.context.instruments[instrument][index]) {\n            this.drumKit.triggerAttack(instrument);\n            if (instrument === \"A4\") this.drumKit.triggerRelease(\"A3\");\n          }\n        }\n\n        this.context.setDivision();\n      }, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], \"16n\").start(0);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(TransportContainer, {\n      transport: Tone.Transport,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(BPMContainer, {\n      bpm: this.context.bpm,\n      setBpm: this.context.setBpm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(GridContainer, {\n      setGrid: this.setGrid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n}\nBox.contextType = GridContext;","map":{"version":3,"sources":["/Users/Ed/code/ed1001/react-drums/src/components/Box.jsx"],"names":["React","GridContext","Tone","GridContainer","TransportContainer","BPMContainer","Box","Component","componentDidMount","sequence","Sequence","time","index","instrument","Object","keys","context","instrumentLabels","instruments","drumKit","triggerAttack","triggerRelease","setDivision","start","render","Transport","bpm","setBpm","setGrid","contextType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,QAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAG/CC,iBAH+C,GAG3B,MAAM;AACxB,WAAKC,QAAL,GAAgB,IAAIP,IAAI,CAACQ,QAAT,CACd,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACf,aAAK,IAAIC,UAAT,IAAuBC,MAAM,CAACC,IAAP,CAAY,KAAKC,OAAL,CAAaC,gBAAzB,CAAvB,EAAmE;AACjE,cAAI,KAAKD,OAAL,CAAaE,WAAb,CAAyBL,UAAzB,EAAqCD,KAArC,CAAJ,EAAiD;AAC/C,iBAAKO,OAAL,CAAaC,aAAb,CAA2BP,UAA3B;AACA,gBAAIA,UAAU,KAAK,IAAnB,EAAyB,KAAKM,OAAL,CAAaE,cAAb,CAA4B,IAA5B;AAC1B;AACF;;AACD,aAAKL,OAAL,CAAaM,WAAb;AACD,OATa,EAUd,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,CAVc,EAWd,KAXc,EAYdC,KAZc,CAYR,CAZQ,CAAhB;AAaD,KAjB8C;AAAA;;AAmB/CC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,kBAAD;AAAoB,MAAA,SAAS,EAAEtB,IAAI,CAACuB,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAE,KAAKT,OAAL,CAAaU,GAAhC;AAAqC,MAAA,MAAM,EAAE,KAAKV,OAAL,CAAaW,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE,KAAKC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AA3B8C;AAA5BtB,G,CACZuB,W,GAAc5B,W","sourcesContent":["import React from \"react\";\nimport { GridContext } from \"../contexts/GridContext\";\nimport Tone from \"tone\";\n\nimport GridContainer from \"./GridContainer\";\nimport TransportContainer from \"./TransportContainer\";\nimport BPMContainer from \"./BPMContainer\";\n\nimport \"../App\";\n\nexport default class Box extends React.Component {\n  static contextType = GridContext;\n\n  componentDidMount = () => {\n    this.sequence = new Tone.Sequence(\n      (time, index) => {\n        for (let instrument of Object.keys(this.context.instrumentLabels)) {\n          if (this.context.instruments[instrument][index]) {\n            this.drumKit.triggerAttack(instrument);\n            if (instrument === \"A4\") this.drumKit.triggerRelease(\"A3\");\n          }\n        }\n        this.context.setDivision();\n      },\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n      \"16n\"\n    ).start(0);\n  };\n\n  render() {\n    return (\n      <div className=\"box\">\n        <TransportContainer transport={Tone.Transport} />\n        <BPMContainer bpm={this.context.bpm} setBpm={this.context.setBpm} />\n        <GridContainer setGrid={this.setGrid} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}